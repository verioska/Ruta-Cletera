{"version":3,"sources":["components/Map.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","platform","map","state","app_id","app_code","useHTTPS","center","lat","lng","zoom","window","H","service","Platform","layer","createDefaultLayers","container","refs","normal","events","mapevents","MapEvents","Behavior","ui","UI","createDefault","_this2","startPoint","endPoint","routingParameters","mode","waypoint0","long","waypoint1","representation","onResult","result","route","routeShape","linestring","console","log","response","shape","geo","LineString","forEach","point","parts","split","pushLatLngAlt","waypoint","mappedPosition","routeLine","Polyline","style","strokeColor","lineWidth","startMarker","Marker","latitude","longitude","endMarker","addObjects","setViewBounds","getBounds","router","getRoutingService","calculateRoute","error","alert","message","react_default","a","createElement","ref","width","height","background","React","Component","Search","start","end","functionStart","bind","assertThisInitialized","functionEnd","event","setState","objectSpread","target","value","className","onChange","placeholder","onClick","coordinates","App","functionCoordinates","navigator","geolocation","getCurrentPosition","position","coords","fetch","then","data","json","Response","View","Result","Location","NavigationPosition","Latitude","Longitude","address","Address","Label","Map_Map","components_Search_Search","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdedd74f.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Marker } from 'react-leaflet';\r\n\r\nexport default class Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.platform = null;\r\n    this.map = null;\r\n\r\n    this.state = {\r\n      app_id: props.app_id,\r\n      app_code: props.app_code,\r\n      useHTTPS: true,\r\n      // useCIT: true,\r\n      center: {\r\n        lat: props.lat,\r\n        lng: props.lng,\r\n      },\r\n      zoom: props.zoom,\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n \r\n    this.platform = new window.H.service.Platform(this.state);\r\n\r\n    var layer = this.platform.createDefaultLayers();\r\n    var container = this.refs[\"here-map\"];\r\n\r\n    this.map = new window.H.Map(container, layer.normal.map, {\r\n      center: this.state.center,\r\n      zoom: this.state.zoom,\r\n    })\r\n\r\n    var events = new window.H.mapevents.MapEvents(this.map);\r\n    // eslint-disable-next-line\r\n    var behavior = new window.H.mapevents.Behavior(events);\r\n    // eslint-disable-next-line\r\n    var ui = new window.H.ui.UI.createDefault(this.map, layer)\r\n\r\n    \r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n \r\n    if (this.props.startPoint.lat !== \"\" && this.props.endPoint.lat !== \"\") {\r\n    \r\n      this.routingParameters = {\r\n        'mode': 'fastest;pedestrian',\r\n        'waypoint0': \"geo!\" + this.props.startPoint.lat + \",\" + this.props.startPoint.long,\r\n        'waypoint1': \"geo!\" + this.props.endPoint.lat + \",\" + this.props.endPoint.long,\r\n        'representation': 'display'\r\n      };\r\n\r\n      this.onResult = result => {\r\n        console.log(result)\r\n        var route,\r\n          routeShape,\r\n          startPoint,\r\n          endPoint,\r\n          linestring;\r\n        if (result.response && result.response.route) {\r\n          // Pick the first route from the response:\r\n          route = result.response.route[0];\r\n          // Pick the route's shape:\r\n          routeShape = route.shape;\r\n\r\n          // Create a linestring to use as a point source for the route line\r\n          linestring = new window.H.geo.LineString();\r\n\r\n          // Push all the points in the shape into the linestring:\r\n          routeShape.forEach(function (point) {\r\n            var parts = point.split(',');\r\n            linestring.pushLatLngAlt(parts[0], parts[1]);\r\n          });\r\n\r\n          // Retrieve the mapped positions of the requested waypoints:\r\n          startPoint = route.waypoint[0].mappedPosition;\r\n          endPoint = route.waypoint[1].mappedPosition;\r\n\r\n          // Create a polyline to display the route:\r\n          this.routeLine = new window.H.map.Polyline(linestring, {\r\n            style: { strokeColor: 'blue', lineWidth: 2 }\r\n          });\r\n\r\n          // Create a marker for the start point:\r\n          this.startMarker = new window.H.map.Marker({\r\n            lat: startPoint.latitude,\r\n            lng: startPoint.longitude\r\n          });\r\n\r\n          // Create a marker for the end point:\r\n          this.endMarker = new window.H.map.Marker({\r\n            lat: endPoint.latitude,\r\n            lng: endPoint.longitude\r\n          });\r\n\r\n          // Add the route polyline and the two markers to the map:\r\n          this.map.addObjects([this.routeLine, this.startMarker, this.endMarker]);\r\n\r\n          // Set the map's viewport to make the whole route visible:\r\n          this.map.setViewBounds(this.routeLine.getBounds());\r\n        }\r\n      };\r\n\r\n      // Get an instance of the routing service:\r\n      this.router = this.platform.getRoutingService();\r\n\r\n      // Call calculateRoute() with the routing parameters,\r\n      // the callback and an error callback function (called if a\r\n      // communication error occurs):\r\n      this.router.calculateRoute(this.routingParameters, this.onResult,\r\n        function (error) {\r\n          alert(error.message);\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref=\"here-map\" style={{ width: '100%', height: '400px', background: 'grey' }}>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        start: '',\r\n        end: ''\r\n      }\r\n      this.functionStart = this.functionStart.bind(this);\r\n      this.functionEnd = this.functionEnd.bind(this);\r\n    \r\n  }\r\n\r\n  functionStart(event){\r\n    this.setState({\r\n        ...this.state,\r\n        start: event.target.value\r\n    })\r\n\r\n  }\r\n  functionEnd(event){\r\n    this.setState({\r\n        ...this.state,\r\n        end: event.target.value\r\n    })\r\n\r\n  }\r\n \r\n\r\n  render() {\r\n      return (\r\n          <div className=\"App\">\r\n             <input onChange={(event) => this.functionStart(event)}  value={this.state.start} placeholder=\"Inicio\"></input>\r\n             <input onChange={(event) => this.functionEnd(event)}  value={this.state.end}placeholder=\"Fin\"></input>\r\n             <button onClick={() => this.props.coordinates(this.state.start, this.state.end)}>Buscar ruta</button>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport Map from './components/Map';\nimport Search from './components/Search/Search';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      app_id: \"dPPKrUEpsqpYWIAVcmLD\",\n      app_code: \"4Uosgp7aDFaZc0VoxXZTEg\",\n      startPoint: {\n        lat: '',\n        long: '',\n      },\n      endPoint: {\n        lat: '',\n        long: '',\n      },\n\n    }\n\n    this.functionCoordinates = this.functionCoordinates.bind(this);\n   \n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      console.log(navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState({\n            ...this.state,\n            lat: position.coords.latitude,\n            long: position.coords.longitude,\n            error: null,\n          });\n        },\n        (error) => {\n          // alert(error.message)\n          this.setState({\n            ...this.state,\n            error: error.message\n          })\n        }\n      );\n    }\n  }\n\n  async functionCoordinates (start, end) {\n    this.startPoint = await fetch(\"https://geocoder.api.here.com/6.2/geocode.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&searchtext=\" + start)\n      .then(data => data.json())\n      .then(data => {\n        console.log(data,\"esta\")\n        return {\n          lat: data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n          long: data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n          address: data.Response.View[0].Result[0].Location.Address.Label,\n        }\n      })\n    this.endPoint = await fetch(\"https://geocoder.api.here.com/6.2/geocode.json?app_id=\" + this.state.app_id + \"&app_code=\" + this.state.app_code + \"&searchtext=\" + end)\n      .then(data => data.json())\n      .then(data => {\n        return {\n          lat: data.Response.View[0].Result[0].Location.NavigationPosition[0].Latitude,\n          long: data.Response.View[0].Result[0].Location.NavigationPosition[0].Longitude,\n          address: data.Response.View[0].Result[0].Location.Address.Label,\n        }\n      })\n\n    this.setState({\n      ...this.state,\n      startPoint: {\n        ...this.startPoint\n\n      },\n      endPoint: {\n        ...this.endPoint\n       \n      },\n   \n    })\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Map\n          app_id={this.state.app_id}\n          app_code={this.state.app_code}\n          lat=\"-33.4489\"\n          lng=\"-70.6693\"\n          zoom=\"13\"\n          startPoint={this.state.startPoint}\n          endPoint={this.state.endPoint}\n     \n        />\n       <Search  coordinates={this. functionCoordinates}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n// import React, { Component } from 'react';\n// import Map from './Map';\n// import './App.css';\n\n// class App extends Component {\n//   constructor(props) {\n//       super(props);\n\n//       this.state = {\n//           theme: 'normal.day',\n//       }\n\n//       this.onChange = this.onChange.bind(this);\n//   }\n//   componentDidMount() {\n//     if (navigator.geolocation) {\n//       console.log(navigator.geolocation)\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           this.setState({\n//             ...this.state,\n//             lat: position.coords.latitude,\n//             long: position.coords.longitude,\n//             error: null,\n//           });\n//         },\n//         (error) => {\n//           // alert(error.message)\n//           this.setState({\n//             ...this.state,\n//             error: error.message\n//           })\n//         }\n//       );\n//     }\n//   }\n\n//   onChange(evt) {\n//       evt.preventDefault();\n\n//       var change = evt.target.id;\n//       this.setState({\n//           \"theme\": change,\n//       });\n//   }\n\n//   render() {\n//       return (\n//           <div className=\"App\">\n//               < Map\n//                   app_id=\"dPPKrUEpsqpYWIAVcmLD\"\n//                   app_code=\"4Uosgp7aDFaZc0VoxXZTEg\"\n//                   lat=\"42.345978\"\n//                   lng=\"-83.0405\"\n//                   zoom=\"13\"\n//                   theme={ this.state.theme }\n//               />\n//               {/* <ThemeSelector changeTheme={ this.onChange } /> */}\n//           </div>\n//       );\n//   }\n// }\n\n\n\n// export default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}